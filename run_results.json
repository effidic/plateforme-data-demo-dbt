{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.19", "generated_at": "2024-12-19T12:28:47.326923Z", "invocation_id": "d343024c-9f68-434c-94cb-aeddb4b1b3fb", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.264732Z", "completed_at": "2024-12-19T12:28:47.285844Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.298663Z", "completed_at": "2024-12-19T12:28:47.298678Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04408717155456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_immo__demande_valeur_fonciere", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_immo`.`demande_valeur_fonciere`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        id_parcelle AS id_parcelle,\n        id_mutation AS cd_id_mutation,\n        safe_cast( date_mutation AS date format 'YYYY-MM-DD' ) AS dt_mutation,\n        numero_disposition AS nb_disposition,\n        nature_mutation AS lb_nature_mutation,\n        safe_cast(valeur_fonciere AS decimal) AS mt_valeur_fonciere,\n        adresse_numero AS cd_adresse_numero,\n        adresse_suffixe AS lb_adresse_suffixe,\n        adresse_nom_voie AS lb_adresse_nom_voie,\n        adresse_code_voie AS cd_adresse_voie,\n        code_postal AS cd_postal,\n        code_commune AS cd_commune,\n        nom_commune AS lb_commune,\n        code_departement AS cd_departement,\n        ancien_code_commune AS cd_ancien_commune,\n        ancien_nom_commune AS lb_ancien_commune,\n        ancien_id_parcelle AS cd_ancien_parcelle,\n        numero_volume AS cd_volume,\n        lot1_numero AS cd_lot1,\n        safe_cast(lot1_surface_carrez AS decimal) AS nb_lot1_surface_carrez,\n        lot2_numero AS cd_lot2,\n        safe_cast(lot2_surface_carrez AS decimal) AS nb_lot2_surface_carrez,\n        lot3_numero AS cd_lot3,\n        safe_cast(lot3_surface_carrez AS decimal) AS nb_lot3_surface_carrez,\n        lot4_numero AS cd_lot4,\n        safe_cast(lot4_surface_carrez AS decimal) AS nb_lot4_surface_carrez,\n        lot5_numero AS cd_lot5,\n        safe_cast(lot5_surface_carrez AS decimal) AS nb_lot5_surface_carrez,\n        safe_cast(nombre_lots AS int) AS lb_nombre_lots,\n        code_type_local AS cd_type_local,\n        type_local AS lb_type_local,\n        code_nature_culture AS cd_nature_culture,\n        nature_culture AS lb_nature_culture,\n        code_nature_culture_speciale AS cd_nature_culture_speciale,\n        nature_culture_speciale AS lb_nature_culture_speciale,\n        safe_cast(surface_reelle_bati AS decimal) AS nb_surface_reelle_bati,\n        safe_cast(nombre_pieces_principales AS int) AS lb_nombre_pieces_principales,\n        safe_cast(surface_terrain AS decimal) AS nb_surface_terrain,\n        safe_cast(longitude AS decimal) AS cd_longitude,\n        safe_cast(latitude AS decimal) AS cd_latitude,\n        null as test,\n        CASE \n            WHEN mod(safe_cast(right(id_mutation, 6) AS int), 7) = 1 THEN 'simple' \n            ELSE 'exclusif'\n        END as cd_type_mandat\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_immo__demande_valeur_fonciere`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.274096Z", "completed_at": "2024-12-19T12:28:47.286408Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.299428Z", "completed_at": "2024-12-19T12:28:47.299436Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.043979644775390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_immo__mandats", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_immo`.`mandats`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        type AS cd_type_mandat,\n        safe_cast(split(replace(replace(intervalle, '\u20ac', ''), ' ', ''), '\u00e0')[0] as decimal) AS mt_borne_inf_interval,\n        safe_cast(split(replace(replace(intervalle, '\u20ac', ''), ' ', ''), '\u00e0')[1] as decimal) AS mt_borne_sup_interval,\n        safe_cast(replace(frais_flat, '\u20ac', '') AS decimal) AS mt_frais_plat,\n        safe_cast(replace(frais_pourcentage, '%', '') AS decimal) AS mt_frais_pourcentage,\n        safe_cast(replace(stationnement, '\u20ac', '') AS decimal) AS mt_frais_stationnement,\n        safe_cast(replace(complement, '\u20ac', '') AS decimal) AS mt_complement\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_immo__mandats`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.278274Z", "completed_at": "2024-12-19T12:28:47.294549Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.300433Z", "completed_at": "2024-12-19T12:28:47.300439Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04342246055603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_olympics__dictionnaire", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_olympics`.`dictionnaire`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        Pays as lb_pays,\n        Code as cd_pays,\n        safe_cast(Population as int) as nb_population,\n        safe_cast(Pib_par_habitant as int) as mt_pib_par_habitant\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__dictionnaire`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.280691Z", "completed_at": "2024-12-19T12:28:47.294992Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.300820Z", "completed_at": "2024-12-19T12:28:47.300829Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.04212617874145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_olympics__winter", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_olympics`.`winter`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        Annee as dt_annee,\n        Ville as lb_ville,\n        Sport as lb_sport,\n        Discipline as lb_discipline,\n        Athlete as lb_athlete,\n        Pays as cd_pays,\n        Genre as lb_genre,\n        Evenement as lb_evenement,\n        Medaille as lb_medaille\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__winter`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.283158Z", "completed_at": "2024-12-19T12:28:47.295810Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.302317Z", "completed_at": "2024-12-19T12:28:47.302326Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.042672157287597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_pdl__base_sirene", "compiled": true, "compiled_code": "with source as (\n      select _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_pdl`.`base_sirene_v3`\n),\nrenamed as (\n    SELECT \n        _FILE_NAME as lb_fichier_source,\n        SIREN as cd_siren,\n        NIC as cd_nic,\n        SIRET as cd_siret,\n        INSEE_COM as cd_insee,\n        Denomination_usuelle_de_l_etablissement as lb_denomination,\n        concat(Enseigne_de_l_etablissement_1, ',', Enseigne_de_l_etablissement_2, ',', Enseigne_de_l_etablissement_3)  as lb_enseignes,\n        safe_cast(Date_de_creation_de_l_etablissement as date format 'YYYY-MM-DD' ) as dt_creation,\n        safe_cast(Date_de_la_derniere_mise_a_jour_de_l_etablissement as date format 'YYYY-MM-DD' ) as dt_update,\n        Categorie_de_l_entreprise as lb_categorie,\n        replace(Annee_de_la_categorie_de_l_entreprise, '.0', '') as cd_annee_categorisation,\n        case \n            when Caractere_employeur_de_l_etablissement = \"Oui\" then True\n            when Caractere_employeur_de_l_etablissement = \"Non\" then False\n            else False\n        end as bl_est_employeur,\n        Tranche_de_l_effectif_de_l_etablissement as lb_tranche_effectif,\n        replace(Annee_de_la_tranche_d_effectif_de_l_etablissement, '.0', '') as cd_annee_tranche_effectif,\n        case \n            when Etablissement_siege = \"Oui\" then True \n            when Etablissement_siege = \"Non\" then False\n            else False \n        end as bl_siege,\n        Activite_principale_de_l_etablissement as cd_activite,\n        Section_de_l_etablissement as lb_section,\n        Sous_section_de_l_etablissement as lb_sous_section,\n        Code_postal_de_l_etablissement as cd_postal,\n        Commune_de_l_etablissement as lb_commune,\n        Premiere_ligne_de_l_adressage as lb_proprietaire_adresse,\n        Adresse_de_l_etablissement as lb_adresse,\n        Territoire as lb_territoire,\n        split(Geolocalisation_de_l_etablissement, ', ')[0] as lb_geolocalisation_x,\n        split(Geolocalisation_de_l_etablissement, ', ')[1] as lb_geolocalisation_y,\n        --## Sigle_de_l_unite_legale as cd_unite_legale,\n        --## Denomination_de_l_unite_legale as lb_unite_legale,\n        --## case \n        --##     when Caractere_employeur_de_l_unite_legale == \"Oui\" then True\n        --##     when Caractere_employeur_de_l_unite_legale == \"Non\" then False\n        --##     else False \n        --## end as bl,\n        --## Tranche_de_l_effectif_de_l_unite_legale as lb_tranche_effectif_unite_legale,\n        --## concat(Denomination_usuelle_de_l_unite_legale_1, ',' ,Denomination_usuelle_de_l_unite_legale_2, ',', Denomination_usuelle_de_l_unite_legale_3, ',' as lb_denominations_unite_legale,\n        --## Categorie_juridique_de_l_unite_legale as cd_categorie_juridique_ul,\n        --## Libelle_categorie_juridique as lb_categorie_juridique_ul,\n        --## Civilite_de_la_personne_physique as lb_civilite,\n        --## Prenom_usuel_de_la_personne_physique as lb_prenom,\n        --## Pseudonyme_de_la_personne_physique as lb_pseudo,\n        --## Nom_de_la_personne_physique as lb_nom,\n        --## Nom_d_usage_de_la_personne_physique as lb_nom_usage,\n        --## case \n        --##     when Economie_sociale_et_solidaire_unite_legale == \"Oui\" then True\n        --##     when Economie_sociale_et_solidaire_unite_legale == \"Non\" then False\n        --##     else False\n        --## end as bl_economie_sociale_solidaire_ul,\n        PLUI as cd_plui,\n    FROM source\n)\n\nselect * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_pdl__base_sirene`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.286797Z", "completed_at": "2024-12-19T12:28:47.296763Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.303490Z", "completed_at": "2024-12-19T12:28:47.303497Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04574775695800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_olympics__summer", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_olympics`.`summer`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        Annee as dt_annee,\n        Ville as lb_ville,\n        Sport as lb_sport,\n        Discipline as lb_discipline,\n        Athlete as lb_athlete,\n        Pays as cd_pays,\n        Genre as lb_genre,\n        Evenement as lb_evenement,\n        Medaille as lb_medaille\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__summer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.289234Z", "completed_at": "2024-12-19T12:28:47.297220Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.303878Z", "completed_at": "2024-12-19T12:28:47.303884Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.03626060485839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_pdl__borne_de_recharge", "compiled": true, "compiled_code": "with source as (\n      select _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_pdl`.`observatoire_communication`\n),\nrenamed as (\n    SELECT \n        _FILE_NAME as lb_fichier_source,\n        Commune as lb_commune,\n        epci as lb_epci,\n        Departement as lb_departement,\n        Region as lb_region,\n        sup_id as cd_sup_id,\n        id as cd_id,\n        generation as lb_generation,\n        Technologie as lb_technologie,\n        code_departement as cd_departement,\n        code_insee as cd_insee,\n        date_de_mise_a_jour as dt_de_mise_a_jour,\n        sta_nm_anfr as lb_sta_nm_anfr,\n        nat_id as lb_nat_id,\n        sup_nm_haut as lb_sup_nm_haut,\n        tpo_id as lb_tpo_id,\n        adr_lb_lieu as lb_adr_lieu,\n        adr_lb_add1 as lb_adr_add1,\n        adr_lb_add2 as lb_adr_add2,\n        adr_lb_add3 as lb_adr_add3,\n        Code_postal as lb_code_postal,\n        INSEE as lb_insee,\n        coord as lb_coord,\n        recordid as cd_recordid,\n        adm_lb_lnom as lb_adm_lb_lnom,\n        statut as cd_statut,\n        Date_de_mise_en_service as dt_de_mise_en_service,\n        localisation as cd_localisation\n    FROM source\n)\n\nselect * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_pdl__borne_de_recharge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.291763Z", "completed_at": "2024-12-19T12:28:47.298280Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.305855Z", "completed_at": "2024-12-19T12:28:47.305862Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.036489248275756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_pdl__observatoire_communication", "compiled": true, "compiled_code": "with source as (\n      select _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_pdl`.`observatoire_communication`\n),\nrenamed as (\n    SELECT \n        _FILE_NAME as lb_fichier_source,\n        Commune as lb_commune,\n        epci as lb_epci,\n        Departement as lb_departement,\n        Region as lb_region,\n        sup_id as cd_sup_id,\n        id as cd_id,\n        generation as lb_generation,\n        Technologie as lb_technologie,\n        code_departement as cd_departement,\n        code_insee as cd_insee,\n        date_de_mise_a_jour as dt_de_mise_a_jour,\n        sta_nm_anfr as lb_sta_nm_anfr,\n        nat_id as lb_nat_id,\n        sup_nm_haut as lb_sup_nm_haut,\n        tpo_id as lb_tpo_id,\n        adr_lb_lieu as lb_adr_lieu,\n        adr_lb_add1 as lb_adr_add1,\n        adr_lb_add2 as lb_adr_add2,\n        adr_lb_add3 as lb_adr_add3,\n        Code_postal as lb_code_postal,\n        INSEE as lb_insee,\n        coord as lb_coord,\n        recordid as cd_recordid,\n        adm_lb_lnom as lb_adm_lb_lnom,\n        statut as cd_statut,\n        Date_de_mise_en_service as dt_de_mise_en_service,\n        localisation as cd_localisation\n    FROM source\n)\n\nselect * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_pdl__observatoire_communication`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.312563Z", "completed_at": "2024-12-19T12:28:47.319879Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.320614Z", "completed_at": "2024-12-19T12:28:47.320621Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010970354080200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.dtm_demande_valeur_fonciere", "compiled": true, "compiled_code": "SELECT\n    valeur_fonciere.* EXCEPT (lb_nature_culture,cd_nature_culture_speciale,lb_nature_culture_speciale),\n    mt_valeur_fonciere AS mt_valeur_fonciere_hors_commission,\n    null AS mt_valeur_fonciere_totale,\n    null AS mt_metre_carre_lot_1,\n    null AS mt_metre_carre_bati,\n    null AS mt_metre_carre_terrain,\n    null AS lb_nature_culture,\n    null AS cd_nature_culture_speciale,\n    null AS lb_nature_culture_speciale\nFROM `plateforme-data-demo`.`1_stage_dbt`.`stg_immo__demande_valeur_fonciere` valeur_fonciere\nLEFT JOIN `plateforme-data-demo`.`1_stage_dbt`.`stg_immo__mandats` AS mandats\n    ON mandats.cd_type_mandat = valeur_fonciere.cd_type_mandat\nWHERE valeur_fonciere.mt_valeur_fonciere >= mandats.mt_borne_inf_interval\n    AND valeur_fonciere.mt_valeur_fonciere <= mandats.mt_borne_sup_interval", "relation_name": "`plateforme-data-demo`.`2_dtm`.`dtm_demande_valeur_fonciere`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-19T12:28:47.315521Z", "completed_at": "2024-12-19T12:28:47.320981Z"}, {"name": "execute", "started_at": "2024-12-19T12:28:47.322510Z", "completed_at": "2024-12-19T12:28:47.322516Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011749267578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.dtm_olympics_winners", "compiled": true, "compiled_code": "with all_olympics AS (\n    SELECT\n        olympics_summer.*,\n        \n    FROM `plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__summer` olympics_summer\n    UNION ALL \n    SELECT\n        olympics_winter.*,\n    FROM `plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__winter`AS olympics_winter\n)\nSELECT \n    all_olympics.lb_fichier_source as lb_saison,\n    all_olympics.dt_annee,\n\n    all_olympics.lb_ville,\n    all_olympics.lb_sport,\n    all_olympics.lb_discipline,\n    all_olympics.lb_athlete,\n    null AS lb_athlete_name,\n    null AS lb_athlete_surname,\n    all_olympics.cd_pays,\n    olympics_dict.lb_pays,\n    all_olympics.lb_genre,\n    all_olympics.lb_evenement,\n    all_olympics.lb_medaille,\n    CASE \n        WHEN lb_medaille = 'Gold' THEN 8\n        WHEN lb_medaille = 'Silver' THEN 2\n        WHEN lb_medaille = 'Bronze' THEN 1\n        ELSE 0\n    END AS nb_score_medaille,\n    null as bl_provient_pays_riche,\n    olympics_dict.nb_population as nb_population,\n    olympics_dict.mt_pib_par_habitant as mt_pib_par_habitant\nFROM all_olympics\nLEFT JOIN `plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__dictionnaire` AS olympics_dict\nON olympics_dict.cd_pays = all_olympics.cd_pays", "relation_name": "`plateforme-data-demo`.`2_dtm`.`dtm_olympics_winners`"}], "elapsed_time": 0.44629669189453125, "args": {"use_colors_file": true, "indirect_selection": "eager", "partial_parse": true, "defer": false, "use_colors": true, "compile": true, "require_explicit_package_overrides_for_builtin_materializations": false, "print": true, "select": [], "vars": {}, "write_json": true, "log_level": "info", "show_resource_report": false, "log_file_max_bytes": 10485760, "log_format": "default", "warn_error_options": {"include": [], "exclude": []}, "cache_selected_only": false, "send_anonymous_usage_stats": true, "printer_width": 80, "strict_mode": false, "favor_state": false, "log_level_file": "debug", "quiet": false, "invocation_command": "dbt docs generate", "version_check": true, "empty_catalog": false, "enable_legacy_logger": false, "log_format_file": "debug", "introspect": true, "macro_debugging": false, "log_path": "/tmp/logs", "project_dir": "/tmp", "static_parser": true, "static": false, "exclude": [], "profiles_dir": "/tmp/", "which": "generate", "populate_cache": true, "partial_parse_file_diff": true}}