{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.11", "generated_at": "2024-04-04T21:10:41.491937Z", "invocation_id": "04259639-d210-4ca2-bfc9-50711ada2104", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.382400Z", "completed_at": "2024-04-04T21:10:41.453774Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.460184Z", "completed_at": "2024-04-04T21:10:41.460197Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09807944297790527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_immo__mandats", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_immo`.`mandats`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        type AS cd_type_mandat,\n        safe_cast(split(replace(replace(intervalle, '\u20ac', ''), ' ', ''), '\u00e0')[0] as decimal) AS mt_borne_inf_interval,\n        safe_cast(split(replace(replace(intervalle, '\u20ac', ''), ' ', ''), '\u00e0')[1] as decimal) AS mt_borne_sup_interval,\n        safe_cast(replace(frais_flat, '\u20ac', '') AS decimal) AS mt_frais_plat,\n        safe_cast(replace(frais_pourcentage, '%', '') AS decimal) AS mt_frais_pourcentage,\n        safe_cast(replace(stationnement, '\u20ac', '') AS decimal) AS mt_frais_stationnement,\n        safe_cast(replace(complement, '\u20ac', '') AS decimal) AS mt_complement\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_immo__mandats`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.370968Z", "completed_at": "2024-04-04T21:10:41.454226Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.460563Z", "completed_at": "2024-04-04T21:10:41.460572Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10064911842346191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_immo__demande_valeur_fonciere", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_immo`.`demande_valeur_fonciere`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        id_parcelle AS id_parcelle,\n        id_mutation AS cd_id_mutation,\n        safe_cast( date_mutation AS date format 'YYYY-MM-DD' ) AS dt_mutation,\n        numero_disposition AS nb_disposition,\n        nature_mutation AS lb_nature_mutation,\n        safe_cast(valeur_fonciere AS int) AS mt_valeur_fonciere,\n        adresse_numero AS cd_adresse_numero,\n        adresse_suffixe AS lb_adresse_suffixe,\n        adresse_nom_voie AS lb_adresse_nom_voie,\n        adresse_code_voie AS cd_adresse_voie,\n        code_postal AS cd_postal,\n        code_commune AS cd_commune,\n        nom_commune AS lb_commune,\n        code_departement AS cd_departement,\n        ancien_code_commune AS cd_ancien_commune,\n        ancien_nom_commune AS lb_ancien_commune,\n        ancien_id_parcelle AS cd_ancien_parcelle,\n        numero_volume AS cd_volume,\n        lot1_numero AS cd_lot1,\n        safe_cast(lot1_surface_carrez AS decimal) AS nb_lot1_surface_carrez,\n        lot2_numero AS cd_lot2,\n        safe_cast(lot2_surface_carrez AS decimal) AS nb_lot2_surface_carrez,\n        lot3_numero AS cd_lot3,\n        safe_cast(lot3_surface_carrez AS decimal) AS nb_lot3_surface_carrez,\n        lot4_numero AS cd_lot4,\n        safe_cast(lot4_surface_carrez AS decimal) AS nb_lot4_surface_carrez,\n        lot5_numero AS cd_lot5,\n        safe_cast(lot5_surface_carrez AS decimal) AS nb_lot5_surface_carrez,\n        safe_cast(nombre_lots AS int) AS lb_nombre_lots,\n        code_type_local AS cd_type_local,\n        type_local AS lb_type_local,\n        safe_cast(surface_reelle_bati AS decimal) AS nb_surface_reelle_bati,\n        safe_cast(nombre_pieces_principales AS int) AS lb_nombre_pieces_principales,\n        safe_cast(surface_terrain AS decimal) AS nb_surface_terrain,\n        safe_cast(longitude AS decimal) AS cd_longitude,\n        safe_cast(latitude AS decimal) AS cd_latitude,\n        'simple' as cd_type_mandat\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_immo__demande_valeur_fonciere`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.438279Z", "completed_at": "2024-04-04T21:10:41.454950Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.460951Z", "completed_at": "2024-04-04T21:10:41.460959Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09872722625732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_infogreffe__chiffres_cles", "compiled": true, "compiled_code": "with source as (\n      select _FILE_NAME , * except(fiche_identite) from `plateforme-data-demo`.`0_raw_infogreffe`.`chiffres_cles_2022`\n      UNION ALL \n      select _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_infogreffe`.`chiffres_cles_2021`\n),\nrenamed as (\n    select\n        _FILE_NAME as lb_fichier_source,\n        denomination as lb_denomination,\n        siren as cd_siren,\n        nic as cd_nic,\n        forme_juridique as lb_forme_juridique,\n        code_ape as cd_ape,\n        libelle_ape as lb_ape,\n        adresse as lb_adresse,\n        code_postal as cd_postal,\n        ville as lb_ville,\n        num_dept as cd_departement,\n        departement as lb_departement,\n        region as lb_region,\n        code_greffe as cd_greffe,\n        greffe as lb_greffe,\n        safe_cast( date_immatriculation as date format 'YYYY-MM-DD' ) as dt_immatriculation,\n        safe_cast( date_radiation as date format 'YYYY-MM-DD' ) as dt_radiation,\n        statut as lb_statut,\n        geolocalisation as cd_geolocalisation,\n        safe_cast( date_de_publication as date format 'YYYY-MM-DD' ) as dt_publication,\n        millesime_1 as cd_annee_1,\n        safe_cast( date_de_cloture_exercice_1 as date format 'YYYY-MM-DD' ) as dt_cloture_exercice_1,\n        safe_cast( duree_1 as int ) as nb_mois_periode_1,\n        safe_cast(ca_1 as decimal) as mt_ca_1,\n        safe_cast(resultat_1 as decimal) as mt_resultat_1,\n        effectif_1 as lb_effectif_1,\n        millesime_2 as cd_annee_2,\n        safe_cast( date_de_cloture_exercice_2 as date format 'YYYY-MM-DD' ) as dt_cloture_exercice_2,\n        safe_cast( duree_2 as int ) as nb_mois_periode_2,\n        safe_cast(ca_2 as decimal) as mt_ca_2,\n        safe_cast(resultat_2 as decimal) as mt_resultat_2,\n        effectif_2 as lb_effectif_2,\n        millesime_3 as cd_annee_3,\n        safe_cast( date_de_cloture_exercice_3 as date format 'YYYY-MM-DD' ) as dt_cloture_exercice_3,\n        safe_cast( duree_3 as int ) as nb_mois_periode_3,\n        safe_cast(ca_3 as decimal) as mt_ca_3,\n        safe_cast(resultat_3 as decimal) as mt_resultat_3,\n        effectif_3 as lb_effectif_3,\n        id as cd_id,\n        tranche_ca_millesime_1 as lb_tranche_ca_millesime_1,\n        tranche_ca_millesime_2 as lb_tranche_ca_millesime_2,\n        tranche_ca_millesime_3 as lb_tranche_ca_millesime_3\n    from source\n)\n, normalized as ( \n    select \n        lb_fichier_source,\n        lb_denomination,\n        cd_siren,\n        cd_nic,\n        lb_forme_juridique,\n        cd_ape,\n        lb_ape,\n        lb_adresse,\n        cd_postal,\n        lb_ville,\n        cd_departement,\n        lb_departement,\n        lb_region,\n        cd_greffe,\n        lb_greffe,\n        dt_immatriculation,\n        dt_radiation,\n        lb_statut,\n        cd_geolocalisation,\n        dt_publication,\n        cd_id,\n        cd_annee_1 as cd_annee,\n        dt_cloture_exercice_1 as dt_cloture_exercice,\n        nb_mois_periode_1 as nb_mois_periode,\n        mt_ca_1 as mt_ca,\n        mt_resultat_1 as mt_resultat,\n        lb_effectif_1 as lb_effectif,\n        lb_tranche_ca_millesime_1 as lb_tranche_ca_millesime \nfrom renamed\nUNION ALL \n    select \n        lb_fichier_source,\n        lb_denomination,\n        cd_siren,\n        cd_nic,\n        lb_forme_juridique,\n        cd_ape,\n        lb_ape,\n        lb_adresse,\n        cd_postal,\n        lb_ville,\n        cd_departement,\n        lb_departement,\n        lb_region,\n        cd_greffe,\n        lb_greffe,\n        dt_immatriculation,\n        dt_radiation,\n        lb_statut,\n        cd_geolocalisation,\n        dt_publication,\n        cd_id,\n        cd_annee_2 as cd_annee,\n        dt_cloture_exercice_2 as dt_cloture_exercice,\n        nb_mois_periode_2 as nb_mois_periode,\n        mt_ca_2 as mt_ca,\n        mt_resultat_2 as mt_resultat,\n        lb_effectif_2 as lb_effectif,\n        lb_tranche_ca_millesime_2 as lb_tranche_ca_millesime \nfrom renamed\nUNION ALL \n    select \n        lb_fichier_source,\n        lb_denomination,\n        cd_siren,\n        cd_nic,\n        lb_forme_juridique,\n        cd_ape,\n        lb_ape,\n        lb_adresse,\n        cd_postal,\n        lb_ville,\n        cd_departement,\n        lb_departement,\n        lb_region,\n        cd_greffe,\n        lb_greffe,\n        dt_immatriculation,\n        dt_radiation,\n        lb_statut,\n        cd_geolocalisation,\n        dt_publication,\n        cd_id,\n        cd_annee_3 as cd_annee,\n        dt_cloture_exercice_3 as dt_cloture_exercice,\n        nb_mois_periode_3 as nb_mois_periode,\n        mt_ca_3 as mt_ca,\n        mt_resultat_3 as mt_resultat,\n        lb_effectif_3 as lb_effectif,\n        lb_tranche_ca_millesime_3 as lb_tranche_ca_millesime \nfrom renamed\n        )\nselect * from normalized", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_infogreffe__chiffres_cles`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.441310Z", "completed_at": "2024-04-04T21:10:41.455639Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.461326Z", "completed_at": "2024-04-04T21:10:41.461333Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09861302375793457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_olympics__dictionnaire", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_olympics`.`dictionnaire`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        Pays as lb_pays,\n        Code as cd_pays,\n        safe_cast(Population as int) as nb_population,\n        safe_cast(Pib_par_habitant as int) as mt_pib_par_habitant\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__dictionnaire`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.443884Z", "completed_at": "2024-04-04T21:10:41.456004Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.461699Z", "completed_at": "2024-04-04T21:10:41.461705Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.09865832328796387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_olympics__summer", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_olympics`.`summer`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        Annee as dt_annee,\n        Ville as lb_ville,\n        Sport as lb_sport,\n        Discipline as lb_discipline,\n        Athlete as lb_athlete,\n        Pays as cd_pays,\n        Genre as lb_genre,\n        Evenement as lb_evenement,\n        Medaille as lb_medaille\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__summer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.446187Z", "completed_at": "2024-04-04T21:10:41.456342Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.462059Z", "completed_at": "2024-04-04T21:10:41.462066Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.09877586364746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_olympics__winter", "compiled": true, "compiled_code": "with source AS (\n      SELECT _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_olympics`.`winter`\n),\nrenamed AS (\n    SELECT \n        _FILE_NAME AS lb_fichier_source,\n        Annee as dt_annee,\n        Ville as lb_ville,\n        Sport as lb_sport,\n        Discipline as lb_discipline,\n        Athlete as lb_athlete,\n        Pays as cd_pays,\n        Genre as lb_genre,\n        Evenement as lb_evenement,\n        Medaille as lb_medaille\n    FROM source\n)\nSELECT * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__winter`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.448739Z", "completed_at": "2024-04-04T21:10:41.456866Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.462422Z", "completed_at": "2024-04-04T21:10:41.462428Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.09873533248901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_pdl__base_sirene", "compiled": true, "compiled_code": "with source as (\n      select _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_pdl`.`base_sirene_v3`\n),\nrenamed as (\n    SELECT \n        _FILE_NAME as lb_fichier_source,\n        SIREN as cd_siren,\n        NIC as cd_nic,\n        SIRET as cd_siret,\n        INSEE_COM as cd_insee,\n        Denomination_usuelle_de_l_etablissement as lb_denomination,\n        concat(Enseigne_de_l_etablissement_1, ',', Enseigne_de_l_etablissement_2, ',', Enseigne_de_l_etablissement_3)  as lb_enseignes,\n        safe_cast(Date_de_creation_de_l_etablissement as date format 'YYYY-MM-DD' ) as dt_creation,\n        safe_cast(Date_de_la_derniere_mise_a_jour_de_l_etablissement as date format 'YYYY-MM-DD' ) as dt_update,\n        Categorie_de_l_entreprise as lb_categorie,\n        replace(Annee_de_la_categorie_de_l_entreprise, '.0', '') as cd_annee_categorisation,\n        case \n            when Caractere_employeur_de_l_etablissement = \"Oui\" then True\n            when Caractere_employeur_de_l_etablissement = \"Non\" then False\n            else False\n        end as bl_est_employeur,\n        Tranche_de_l_effectif_de_l_etablissement as lb_tranche_effectif,\n        replace(Annee_de_la_tranche_d_effectif_de_l_etablissement, '.0', '') as cd_annee_tranche_effectif,\n        case \n            when Etablissement_siege = \"Oui\" then True \n            when Etablissement_siege = \"Non\" then False\n            else False \n        end as bl_siege,\n        Activite_principale_de_l_etablissement as cd_activite,\n        Section_de_l_etablissement as lb_section,\n        Sous_section_de_l_etablissement as lb_sous_section,\n        Code_postal_de_l_etablissement as cd_postal,\n        Commune_de_l_etablissement as lb_commune,\n        Premiere_ligne_de_l_adressage as lb_proprietaire_adresse,\n        Adresse_de_l_etablissement as lb_adresse,\n        Territoire as lb_territoire,\n        split(Geolocalisation_de_l_etablissement, ', ')[0] as lb_geolocalisation_x,\n        split(Geolocalisation_de_l_etablissement, ', ')[1] as lb_geolocalisation_y,\n        --## Sigle_de_l_unite_legale as cd_unite_legale,\n        --## Denomination_de_l_unite_legale as lb_unite_legale,\n        --## case \n        --##     when Caractere_employeur_de_l_unite_legale == \"Oui\" then True\n        --##     when Caractere_employeur_de_l_unite_legale == \"Non\" then False\n        --##     else False \n        --## end as bl,\n        --## Tranche_de_l_effectif_de_l_unite_legale as lb_tranche_effectif_unite_legale,\n        --## concat(Denomination_usuelle_de_l_unite_legale_1, ',' ,Denomination_usuelle_de_l_unite_legale_2, ',', Denomination_usuelle_de_l_unite_legale_3, ',' as lb_denominations_unite_legale,\n        --## Categorie_juridique_de_l_unite_legale as cd_categorie_juridique_ul,\n        --## Libelle_categorie_juridique as lb_categorie_juridique_ul,\n        --## Civilite_de_la_personne_physique as lb_civilite,\n        --## Prenom_usuel_de_la_personne_physique as lb_prenom,\n        --## Pseudonyme_de_la_personne_physique as lb_pseudo,\n        --## Nom_de_la_personne_physique as lb_nom,\n        --## Nom_d_usage_de_la_personne_physique as lb_nom_usage,\n        --## case \n        --##     when Economie_sociale_et_solidaire_unite_legale == \"Oui\" then True\n        --##     when Economie_sociale_et_solidaire_unite_legale == \"Non\" then False\n        --##     else False\n        --## end as bl_economie_sociale_solidaire_ul,\n        PLUI as cd_plui,\n    FROM source\n)\n\nselect * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_pdl__base_sirene`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.451502Z", "completed_at": "2024-04-04T21:10:41.457244Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.462798Z", "completed_at": "2024-04-04T21:10:41.462804Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.09849858283996582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_pdl__borne_de_recharge", "compiled": true, "compiled_code": "with source as (\n      select _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_pdl`.`observatoire_communication`\n),\nrenamed as (\n    SELECT \n        _FILE_NAME as lb_fichier_source,\n        Commune as lb_commune,\n        epci as lb_epci,\n        Departement as lb_departement,\n        Region as lb_region,\n        sup_id as cd_sup_id,\n        id as cd_id,\n        generation as lb_generation,\n        Technologie as lb_technologie,\n        code_departement as cd_departement,\n        code_insee as cd_insee,\n        date_de_mise_a_jour as dt_de_mise_a_jour,\n        sta_nm_anfr as lb_sta_nm_anfr,\n        nat_id as lb_nat_id,\n        sup_nm_haut as lb_sup_nm_haut,\n        tpo_id as lb_tpo_id,\n        adr_lb_lieu as lb_adr_lieu,\n        adr_lb_add1 as lb_adr_add1,\n        adr_lb_add2 as lb_adr_add2,\n        adr_lb_add3 as lb_adr_add3,\n        Code_postal as lb_code_postal,\n        INSEE as lb_insee,\n        coord as lb_coord,\n        recordid as cd_recordid,\n        adm_lb_lnom as lb_adm_lb_lnom,\n        statut as cd_statut,\n        Date_de_mise_en_service as dt_de_mise_en_service,\n        localisation as cd_localisation\n    FROM source\n)\n\nselect * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_pdl__borne_de_recharge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.473477Z", "completed_at": "2024-04-04T21:10:41.482928Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.485144Z", "completed_at": "2024-04-04T21:10:41.485149Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015537500381469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.stg_pdl__observatoire_communication", "compiled": true, "compiled_code": "with source as (\n      select _FILE_NAME , *  from `plateforme-data-demo`.`0_raw_pdl`.`observatoire_communication`\n),\nrenamed as (\n    SELECT \n        _FILE_NAME as lb_fichier_source,\n        Commune as lb_commune,\n        epci as lb_epci,\n        Departement as lb_departement,\n        Region as lb_region,\n        sup_id as cd_sup_id,\n        id as cd_id,\n        generation as lb_generation,\n        Technologie as lb_technologie,\n        code_departement as cd_departement,\n        code_insee as cd_insee,\n        date_de_mise_a_jour as dt_de_mise_a_jour,\n        sta_nm_anfr as lb_sta_nm_anfr,\n        nat_id as lb_nat_id,\n        sup_nm_haut as lb_sup_nm_haut,\n        tpo_id as lb_tpo_id,\n        adr_lb_lieu as lb_adr_lieu,\n        adr_lb_add1 as lb_adr_add1,\n        adr_lb_add2 as lb_adr_add2,\n        adr_lb_add3 as lb_adr_add3,\n        Code_postal as lb_code_postal,\n        INSEE as lb_insee,\n        coord as lb_coord,\n        recordid as cd_recordid,\n        adm_lb_lnom as lb_adm_lb_lnom,\n        statut as cd_statut,\n        Date_de_mise_en_service as dt_de_mise_en_service,\n        localisation as cd_localisation\n    FROM source\n)\n\nselect * from renamed", "relation_name": "`plateforme-data-demo`.`1_stage_dbt`.`stg_pdl__observatoire_communication`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.478290Z", "completed_at": "2024-04-04T21:10:41.483369Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.485513Z", "completed_at": "2024-04-04T21:10:41.485518Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015147209167480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.dtm_olympics_winners", "compiled": true, "compiled_code": "with all_olympics AS (\n    SELECT\n        olympics_summer.*,\n        \n    FROM `plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__summer` olympics_summer\n    UNION ALL \n    SELECT\n        olympics_winter.*,\n    FROM `plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__winter`AS olympics_winter\n)\nSELECT \n    all_olympics.lb_fichier_source as lb_saison,\n    all_olympics.dt_annee,\n    all_olympics.lb_ville,\n    all_olympics.lb_sport,\n    all_olympics.lb_discipline,\n    all_olympics.lb_athlete,\n    all_olympics.cd_pays,\n    olympics_dict.lb_pays,\n    all_olympics.lb_genre,\n    all_olympics.lb_evenement,\n    all_olympics.lb_medaille,\n    CASE \n        WHEN lb_medaille = 'Gold' THEN 5\n        WHEN lb_medaille = 'Silver' THEN 3\n        WHEN lb_medaille = 'Bronze' THEN 1\n        ELSE 0\n    END AS nb_score_medaille\nFROM all_olympics\nLEFT JOIN `plateforme-data-demo`.`1_stage_dbt`.`stg_olympics__dictionnaire` AS olympics_dict\nON olympics_dict.cd_pays = all_olympics.cd_pays", "relation_name": "`plateforme-data-demo`.`2_dtm`.`dtm_olympics_winners`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-04T21:10:41.475849Z", "completed_at": "2024-04-04T21:10:41.483822Z"}, {"name": "execute", "started_at": "2024-04-04T21:10:41.485871Z", "completed_at": "2024-04-04T21:10:41.485878Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016501903533935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.plateforme_data_demo.dtm_demande_valeur_fonciere", "compiled": true, "compiled_code": "SELECT\n    valeur_fonciere.*,\n    mt_valeur_fonciere AS mt_valeur_fonciere_ht,\nFROM `plateforme-data-demo`.`1_stage_dbt`.`stg_immo__demande_valeur_fonciere` valeur_fonciere\nLEFT JOIN `plateforme-data-demo`.`1_stage_dbt`.`stg_immo__mandats` AS mandats\n    ON mandats.cd_type_mandat = valeur_fonciere.cd_type_mandat\nWHERE valeur_fonciere.mt_valeur_fonciere >= mandats.mt_borne_inf_interval\n    AND valeur_fonciere.mt_valeur_fonciere <= mandats.mt_borne_sup_interval", "relation_name": "`plateforme-data-demo`.`2_dtm`.`dtm_demande_valeur_fonciere`"}], "elapsed_time": 0.6399903297424316, "args": {"use_colors_file": true, "which": "generate", "empty_catalog": false, "select": [], "use_colors": true, "vars": {}, "write_json": true, "defer": false, "strict_mode": false, "enable_legacy_logger": false, "log_path": "/tmp/logs", "print": true, "quiet": false, "profiles_dir": "/tmp/", "static_parser": true, "partial_parse": true, "log_level_file": "debug", "indirect_selection": "eager", "log_format_file": "debug", "log_level": "info", "project_dir": "/tmp", "populate_cache": true, "log_format": "default", "show_resource_report": false, "version_check": true, "compile": true, "invocation_command": "dbt docs generate", "introspect": true, "macro_debugging": false, "send_anonymous_usage_stats": true, "favor_state": false, "static": false, "warn_error_options": {"include": [], "exclude": []}, "cache_selected_only": false, "partial_parse_file_diff": true, "log_file_max_bytes": 10485760, "printer_width": 80, "exclude": []}}